// +build !ignore_autogenerated
/*
Copyright 2021 Wim Henderickx.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by ndd-gen. DO NOT EDIT.

package v1

import nddv1 "github.com/netw-device-driver/ndd-runtime/apis/common/v1"

// DeleteTargetCondition of this Registration.
func (mg *Registration) DeleteTargetCondition(target string) {
	delete(mg.Status.TargetConditions, target)
}

// GetActive of this Registration.
func (mg *Registration) GetActive() bool {
	return mg.Spec.Active
}

// GetCondition of this Registration.
func (mg *Registration) GetCondition(ck nddv1.ConditionKind) nddv1.Condition {
	return mg.Status.GetCondition(ck)
}

// GetDeletionPolicy of this Registration.
func (mg *Registration) GetDeletionPolicy() nddv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetNetworkNodeReference of this Registration.
func (mg *Registration) GetNetworkNodeReference() *nddv1.Reference {
	return mg.Spec.NetworkNodeReference
}

// GetTargetCondition of this Registration.
func (mg *Registration) GetTargetCondition(target string, ck nddv1.ConditionKind) nddv1.Condition {
	return mg.Status.TargetConditions[target].GetCondition(ck)
}

// InitializeTargetConditions of this Registration.
func (mg *Registration) InitializeTargetConditions() {
	mg.Status.TargetConditions = make(map[string]*nddv1.TargetConditions)
}

// SetActive of this Registration.
func (mg *Registration) SetActive(b bool) {
	mg.Spec.Active = b
}

// SetConditions of this Registration.
func (mg *Registration) SetConditions(c ...nddv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Registration.
func (mg *Registration) SetDeletionPolicy(r nddv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetNetworkNodeReference of this Registration.
func (mg *Registration) SetNetworkNodeReference(r *nddv1.Reference) {
	mg.Spec.NetworkNodeReference = r
}

// SetTargetConditions of this Registration.
func (mg *Registration) SetTargetConditions(target string, c ...nddv1.Condition) {
	if mg.Status.TargetConditions[target] == nil {
		mg.Status.TargetConditions[target] = new(nddv1.TargetConditions)
	}
	mg.Status.TargetConditions[target].SetConditions(c...)
}
